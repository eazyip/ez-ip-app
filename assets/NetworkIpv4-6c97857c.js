var b=Object.defineProperty;var o=(n,t,s)=>t in n?b(n,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[t]=s;var u=(n,t,s)=>(o(n,typeof t!="symbol"?t+"":t,s),s);import{B as d,P as h}from"./BaseNetworkIpv4Info.vue_vue_type_script_setup_true_lang-57a762da.js";class a extends d{constructor(s,e){super(s,e);u(this,"subnets",new Map)}containsSubnet(s){return this.networkAddress.lesserThanOrEqualTo(s.networkAddress)&&this.broadcastAddress.greaterThanOrEqualTo(s.broadcastAddress)}addSubnetBySize(s,e){if(this.subnets.has(s))throw new Error("Subnet name already in use");const r=new h(Math.floor(32-Math.log2(e+2))),i=r.makeMask();this.addSubnet(s,new a(this.resolveNewSubnetAddress(r.size),i))}addSubnet(s,e){this.subnets.set(s,{subnet:e,inRange:this.containsSubnet(e)})}resolveNewSubnetAddress(s){return this.subnets.size===0?this.networkAddress:this.lastSubnet().broadcastAddress.nextAddress(s+2)}lastSubnet(){return this.subnets.size===0?null:Array.from(this.subnets.values()).pop().subnet}sortSubnets(){const s=[...this.subnets.entries()].sort((e,r)=>r[1].subnet.size-e[1].subnet.size);this.subnets=new Map,s.forEach(e=>{this.addSubnetBySize(e[0],e[1].subnet.size)})}getSubnet(s){return this.subnets.get(s)}removeSubnet(s){this.subnets.delete(s)}getSubnets(){return this.subnets}getSubnetsCount(){return this.subnets.size}}export{a as N};
